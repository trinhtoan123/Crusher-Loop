using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using DG.Tweening;
using System;


public class MapController : MonoBehaviour
{
    [SerializeField] PillarController pillarController;
    [SerializeField] List<Knit> knitItems = new List<Knit>();
    private List<SpoolItem> activeSpools = new List<SpoolItem>();
    private GameObject currentYarnObject;
    public Action<SpoolItem> OnSpoolWinding;
    void OnEnable()
    {
        OnSpoolWinding += IEStartWinding;
    }
    void OnDisable()
    {
        OnSpoolWinding -= IEStartWinding;
    }
    public void Initialize(LevelManager levelManager)
    {
        pillarController.Initialize(levelManager);
        foreach (var knit in knitItems)
        {
            knit.Initialize(levelManager, this);
        }
    }
    public void IEStartWinding(SpoolItem spoolItem)
    {
        if (knitItems == null || knitItems.Count == 0)
        {
            return;
        }
        StartCoroutine(ProcessSmartWinding(knitItems,spoolItem));
    }

    private IEnumerator ProcessSmartWinding(List<Knit> sortedKnits, SpoolItem itemSpool)
    {
        if (itemSpool.IsOnPillar)
        {
            activeSpools.Add(itemSpool);
        }
        foreach (var spool in activeSpools)
        {
            yield return StartCoroutine(ProcessSpoolWinding(spool, sortedKnits));
        }
    }

    private IEnumerator ProcessSpoolWinding(SpoolItem spool, List<Knit> sortedKnits)
    {
        ColorRope spoolColor = spool.color;
        Debug.Log($"üé® B·∫Øt ƒë·∫ßu cu·ªôn len m√†u {spoolColor}");
        List<Knit> consecutiveRows = FindConsecutiveRowsWithColor(spoolColor, sortedKnits);

        if (consecutiveRows.Count == 0)
        {
            yield break;
        }
        yield return StartCoroutine(WindThroughConsecutiveRows(spool, consecutiveRows));

        yield return StartCoroutine(MakeSpoolDisappear(spool));
    }
    private List<Knit> FindConsecutiveRowsWithColor(ColorRope color, List<Knit> sortedKnits)
    {
        List<Knit> consecutiveRows = new List<Knit>();
        bool foundFirstRow = false;
        
        for (int i = 0; i < sortedKnits.Count; i++)
        {
            Knit currentKnit = sortedKnits[i];
            if (currentKnit == null) continue;
            
            // Ki·ªÉm tra xem h√†ng n√†y c√≥ m√†u c·∫ßn t√¨m kh√¥ng
            bool hasTargetColor = HasColorInRow(currentKnit, color);
            
            if (hasTargetColor)
            {
                consecutiveRows.Add(currentKnit);
                foundFirstRow = true;
                Debug.Log($"‚úÖ H√†ng {i + 1} c√≥ m√†u {color}");
            }
            else
            {
                // N·∫øu ƒë√£ t√¨m th·∫•y h√†ng ƒë·∫ßu ti√™n v√† g·∫∑p h√†ng kh√¥ng c√≥ m√†u th√¨ d·ª´ng
                if (foundFirstRow)
                {
                    Debug.Log($"üõë H√†ng {i + 1} kh√¥ng c√≥ m√†u {color}, d·ª´ng chu·ªói li√™n ti·∫øp");
                    break;
                }
                // N·∫øu ch∆∞a t√¨m th·∫•y h√†ng ƒë·∫ßu ti√™n th√¨ ti·∫øp t·ª•c t√¨m
                Debug.Log($"‚è≠Ô∏è H√†ng {i + 1} kh√¥ng c√≥ m√†u {color}, ti·∫øp t·ª•c t√¨m...");
            }
        }
        
        return consecutiveRows;
    }
    
    /// <summary>
    /// Ki·ªÉm tra xem m·ªôt h√†ng c√≥ ch·ª©a m√†u c·ª• th·ªÉ kh√¥ng
    /// </summary>
    private bool HasColorInRow(Knit knit, ColorRope targetColor)
    {
        if (knit == null || knit.KnitItems == null) return false;
        
        foreach (var knitChild in knit.KnitItems)
        {
            if (knitChild != null && knitChild.Color == targetColor)
            {
                return true;
            }
        }
        return false;
    }
    
    /// <summary>
    /// Cu·ªôn len qua c√°c h√†ng li√™n ti·∫øp - t·∫°o s·ª£i len m·ªõi cho m·ªói h√†ng
    /// </summary>
    private IEnumerator WindThroughConsecutiveRows(SpoolItem spool, List<Knit> consecutiveRows)
    {
        Debug.Log($"üîÑ B·∫Øt ƒë·∫ßu cu·ªôn len qua {consecutiveRows.Count} h√†ng li√™n ti·∫øp");
        
        GameObject currentYarn = null;
        
        for (int i = 0; i < consecutiveRows.Count; i++)
        {
            Knit currentRow = consecutiveRows[i];
            
            // Ki·ªÉm tra h∆∞·ªõng cu·ªôn len
            bool isLeftToRight = (i % 2 == 0);
            string direction = isLeftToRight ? "Tr√°i ‚Üí Ph·∫£i" : "Ph·∫£i ‚Üí Tr√°i";
            
            Debug.Log($"üìè H√†ng {i + 1}: {direction}");
            
            // Ch·ªâ x√≥a s·ª£i len c≈© khi cu·ªôn t·ª´ tr√°i sang ph·∫£i
            if (isLeftToRight && currentYarn != null)
            {
                Destroy(currentYarn);
                Debug.Log($"üóëÔ∏è X√≥a s·ª£i len c≈© (cu·ªôn t·ª´ tr√°i sang ph·∫£i)");
            }
            else if (!isLeftToRight)
            {
                Debug.Log($"üîÑ Gi·ªØ nguy√™n s·ª£i len (cu·ªôn t·ª´ ph·∫£i sang tr√°i)");
            }
            
            // T·∫°o s·ª£i len m·ªõi cho h√†ng n√†y
            yield return StartCoroutine(WindSingleRowWithNewYarn(spool, currentRow, isLeftToRight));
            currentYarn = currentYarnObject;
            
            // Delay gi·ªØa c√°c h√†ng
            yield return new WaitForSeconds(0.5f);
        }
        
        // X√≥a s·ª£i len cu·ªëi c√πng sau khi ho√†n th√†nh t·∫•t c·∫£ h√†ng
        if (currentYarn != null)
        {
            Destroy(currentYarn);
            Debug.Log($"üóëÔ∏è X√≥a s·ª£i len cu·ªëi c√πng (ho√†n th√†nh t·∫•t c·∫£ h√†ng)");
        }
        
        Debug.Log($"‚úÖ Ho√†n th√†nh cu·ªôn len qua {consecutiveRows.Count} h√†ng");
    }
    
    /// <summary>
    /// Cu·ªôn len qua m·ªôt h√†ng c·ª• th·ªÉ v·ªõi s·ª£i len m·ªõi
    /// </summary>
    private IEnumerator WindSingleRowWithNewYarn(SpoolItem spool, Knit row, bool leftToRight)
    {
        GameObject yarnObject = null;
        
        // T√¨m t·∫•t c·∫£ KnitChild c√≥ m√†u c·ªßa spool trong h√†ng n√†y
        List<KnitChild> targetChildren = new List<KnitChild>();
        
        foreach (var knitChild in row.KnitItems)
        {
            if (knitChild != null && knitChild.Color == spool.color)
            {
                targetChildren.Add(knitChild);
            }
        }
        
        if (targetChildren.Count == 0)
        {
            Debug.LogWarning($"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y KnitChild n√†o c√≥ m√†u {spool.color} trong h√†ng");
            yield break;
        }
        
        // S·∫Øp x·∫øp theo h∆∞·ªõng
        if (leftToRight)
        {
            targetChildren.Sort((a, b) => a.transform.position.x.CompareTo(b.transform.position.x));
        }
        else
        {
            targetChildren.Sort((a, b) => b.transform.position.x.CompareTo(a.transform.position.x));
        }
        
        string direction = leftToRight ? "tr√°i sang ph·∫£i" : "ph·∫£i sang tr√°i";
        Debug.Log($"üéØ Cu·ªôn len qua {targetChildren.Count} items t·ª´ {direction}");
        
        // T·∫°o hi·ªáu ·ª©ng cu·ªôn len v·ªõi s·ª£i len m·ªõi
        yield return StartCoroutine(CreateWindingEffectWithNewYarn(spool, targetChildren));
        yarnObject = currentYarnObject;
    }
    
    /// <summary>
    /// T·∫°o hi·ªáu ·ª©ng cu·ªôn len v·ªõi s·ª£i len m·ªõi
    /// </summary>
    private IEnumerator CreateWindingEffectWithNewYarn(SpoolItem spool, List<KnitChild> targetChildren)
    {
        // T·∫°o s·ª£i len m·ªõi
        GameObject yarnObject = new GameObject($"Yarn_{spool.color}_{Time.time}");
        LineRenderer yarnRenderer = yarnObject.AddComponent<LineRenderer>();
        
        // C·∫•u h√¨nh LineRenderer
        yarnRenderer.material = GetYarnMaterial(spool.color);
        yarnRenderer.startWidth = 0.1f;
        yarnRenderer.endWidth = 0.1f;
        
        // T·∫°o ƒë∆∞·ªùng ƒëi
        List<Vector3> pathPoints = new List<Vector3>();
        
        // Th√™m v·ªã tr√≠ c·ªßa t·∫•t c·∫£ target children
        foreach (var child in targetChildren)
        {
            pathPoints.Add(child.transform.position);
        }
        
        // Th√™m v·ªã tr√≠ c·ªßa spool
        pathPoints.Add(spool.transform.position);
        
        // C·∫•u h√¨nh LineRenderer
        yarnRenderer.positionCount = pathPoints.Count;
        for (int i = 0; i < pathPoints.Count; i++)
        {
            yarnRenderer.SetPosition(i, pathPoints[i]);
        }
        
        // Animation len ch·∫°y
        float duration = 1.5f;
        float elapsedTime = 0f;
        
        while (elapsedTime < duration)
        {
            elapsedTime += Time.deltaTime;
            float progress = elapsedTime / duration;
            
            // T√≠nh to√°n v·ªã tr√≠ hi·ªán t·∫°i tr√™n ƒë∆∞·ªùng ƒëi
            int segmentIndex = Mathf.FloorToInt(progress * (pathPoints.Count - 1));
            segmentIndex = Mathf.Clamp(segmentIndex, 0, pathPoints.Count - 2);
            
            float segmentProgress = (progress * (pathPoints.Count - 1)) - segmentIndex;
            Vector3 currentPos = Vector3.Lerp(pathPoints[segmentIndex], pathPoints[segmentIndex + 1], segmentProgress);
            
            // C·∫≠p nh·∫≠t v·ªã tr√≠ cu·ªëi c·ªßa s·ª£i len
            yarnRenderer.SetPosition(yarnRenderer.positionCount - 1, currentPos);
            
            yield return null;
        }
        
        // B·∫Øt ƒë·∫ßu cu·ªôn len
        spool.StartWinding(null);
        
        // Hi·ªáu ·ª©ng cu·ªôn len
        yield return new WaitForSeconds(0.5f);
        
        Debug.Log($"‚ú® Ho√†n th√†nh cu·ªôn len cho h√†ng n√†y");
        
        // L∆∞u yarnObject v√†o bi·∫øn class ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p t·ª´ b√™n ngo√†i
        currentYarnObject = yarnObject;
    }
    
    /// <summary>
    /// L√†m cu·ªôn len bi·∫øn m·∫•t
    /// </summary>
    private IEnumerator MakeSpoolDisappear(SpoolItem spool)
    {
        Debug.Log($"üëª Cu·ªôn len {spool.color} bi·∫øn m·∫•t");
        
        // Hi·ªáu ·ª©ng bi·∫øn m·∫•t
        spool.transform.DOScale(Vector3.zero, 0.5f)
            .SetEase(Ease.InBack)
            .OnComplete(() =>
            {
                spool.gameObject.SetActive(false);
            });
        
        yield return new WaitForSeconds(0.5f);
    }
    
    /// <summary>
    /// L·∫•y material cho s·ª£i len
    /// </summary>
    private Material GetYarnMaterial(ColorRope color)
    {
        if (GameManager.Instance?.SpoolData?.SpoolColors != null)
        {
            var colorData = GameManager.Instance.SpoolData.SpoolColors.Find(x => x.color == color);
            if (colorData != null)
            {
                return colorData.materialKnit;
            }
        }
        
        return new Material(Shader.Find("Sprites/Default"));
    }


    /// <summary>
    /// D·ª´ng t·∫•t c·∫£ qu√° tr√¨nh cu·ªôn len ƒëang di·ªÖn ra
    /// </summary>
    public void StopAllYarnWinding()
    {
        Debug.Log("üõë D·ª´ng t·∫•t c·∫£ qu√° tr√¨nh cu·ªôn len...");
        
        foreach (var knit in knitItems)
        {
            if (knit != null)
            {
                knit.StopAutoWinding();
            }
        }
    }

    /// <summary>
    /// Ki·ªÉm tra input debug ƒë·ªÉ test ch·ª©c nƒÉng
    /// </summary>
    private void Update()
    {
        HandleDebugInput();
    }

    private void HandleDebugInput()
    {
        if (Input.GetKeyDown(KeyCode.R))
        {
            Debug.Log("üéØ Nh·∫•n R - B·∫Øt ƒë·∫ßu cu·ªôn len th√¥ng minh");
        }
        
        if (Input.GetKeyDown(KeyCode.Y))
        {
            Debug.Log("üõë Nh·∫•n Y - D·ª´ng t·∫•t c·∫£ qu√° tr√¨nh cu·ªôn len");
            StopAllYarnWinding();
        }
        
        if (Input.GetKeyDown(KeyCode.P))
        {
            Debug.Log("üìã Nh·∫•n P - Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ h·ªá th·ªëng cu·ªôn len");
            ShowSmartWindingDetails();
        }
        
        if (Input.GetKeyDown(KeyCode.L))
        {
            Debug.Log("üîÑ Nh·∫•n L - Ki·ªÉm tra chu·ªói m√†u li√™n ti·∫øp");
            CheckConsecutiveColorSequences();
        }
    }


    /// <summary>
    /// Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ h·ªá th·ªëng cu·ªôn len th√¥ng minh
    /// </summary>
    public void ShowSmartWindingDetails()
    {
        Debug.Log("üß† === TH√îNG TIN H·ªÜ TH·ªêNG CU·ªòN LEN TH√îNG MINH ===");
        
        // T√¨m t·∫•t c·∫£ cu·ªôn len c√≥ s·∫µn
        SpoolItem[] availableSpools = FindObjectsOfType<SpoolItem>();
        Debug.Log($"üéØ T√¨m th·∫•y {availableSpools.Length} cu·ªôn len trong scene");
        
        // S·∫Øp x·∫øp knitItems theo v·ªã tr√≠ Y (t·ª´ tr√™n xu·ªëng d∆∞·ªõi)
        List<Knit> sortedKnits = new List<Knit>(knitItems);
        sortedKnits.Sort((a, b) => b.transform.position.y.CompareTo(a.transform.position.y));
        
        foreach (var spool in availableSpools)
        {
            if (spool != null)
            {
                ColorRope spoolColor = spool.color;
                List<Knit> consecutiveRows = FindConsecutiveRowsWithColor(spoolColor, sortedKnits);
                
                Debug.Log($"üé® Cu·ªôn len {spoolColor}:");
                Debug.Log($"   üìã C√≥ {consecutiveRows.Count} h√†ng li√™n ti·∫øp");
                
                for (int i = 0; i < consecutiveRows.Count; i++)
                {
                    bool isLeftToRight = (i % 2 == 0);
                    string direction = isLeftToRight ? "Tr√°i ‚Üí Ph·∫£i" : "Ph·∫£i ‚Üí Tr√°i";
                    Debug.Log($"   üìè H√†ng {i + 1}: {direction}");
                }
                
                if (consecutiveRows.Count == 0)
                {
                    Debug.Log($"   ‚ùå Kh√¥ng c√≥ h√†ng n√†o c√≥ m√†u {spoolColor}");
                }
            }
        }
        
        Debug.Log("üß† === K·∫æT TH√öC TH√îNG TIN ===");
    }
    
    /// <summary>
    /// Ki·ªÉm tra chu·ªói m√†u li√™n ti·∫øp cho t·∫•t c·∫£ cu·ªôn len
    /// </summary>
    public void CheckConsecutiveColorSequences()
    {
        Debug.Log("üîç === KI·ªÇM TRA CHU·ªñI M√ÄU LI√äN TI·∫æP ===");
        
        // S·∫Øp x·∫øp knitItems theo v·ªã tr√≠ Y (t·ª´ tr√™n xu·ªëng d∆∞·ªõi)
        List<Knit> sortedKnits = new List<Knit>(knitItems);
        sortedKnits.Sort((a, b) => b.transform.position.y.CompareTo(a.transform.position.y));
        
        // T√¨m t·∫•t c·∫£ cu·ªôn len c√≥ s·∫µn
        SpoolItem[] availableSpools = FindObjectsOfType<SpoolItem>();
        
        foreach (var spool in availableSpools)
        {
            if (spool != null)
            {
                ColorRope spoolColor = spool.color;
                List<Knit> consecutiveRows = FindConsecutiveRowsWithColor(spoolColor, sortedKnits);
                
                Debug.Log($"üé® Cu·ªôn len {spoolColor}: {consecutiveRows.Count} h√†ng li√™n ti·∫øp");
                
                if (consecutiveRows.Count > 0)
                {
                    Debug.Log($"   ‚úÖ C√≥ th·ªÉ cu·ªôn len qua {consecutiveRows.Count} h√†ng");
                    for (int i = 0; i < consecutiveRows.Count; i++)
                    {
                        bool isLeftToRight = (i % 2 == 0);
                        string direction = isLeftToRight ? "Tr√°i ‚Üí Ph·∫£i" : "Ph·∫£i ‚Üí Tr√°i";
                        Debug.Log($"   üìè H√†ng {i + 1}: {direction}");
                    }
                }
                else
                {
                    Debug.Log($"   ‚ùå Kh√¥ng th·ªÉ cu·ªôn len - kh√¥ng c√≥ h√†ng li√™n ti·∫øp");
                }
            }
        }
        
        Debug.Log("üîç === K·∫æT TH√öC KI·ªÇM TRA ===");
    }

}

